/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 12:53:43 GMT 2018
 */

package com.landlord.api.repositories;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import com.landlord.models.User;
import com.landlord.repositories.SqlUsersRepositoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlUsersRepositoryImpl_ESTest extends SqlUsersRepositoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlUsersRepositoryImpl sqlUsersRepositoryImpl0 = new SqlUsersRepositoryImpl();
      Query<User> query0 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(query0).getSingleResult();
      Query<User> query1 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      doReturn(transaction1).when(session0).getTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(sessionFactory0).openSession();
      Injector.inject(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class);
      User user0 = sqlUsersRepositoryImpl0.getByUserName("");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlUsersRepositoryImpl sqlUsersRepositoryImpl0 = new SqlUsersRepositoryImpl();
      User user0 = new User();
      Query<User> query0 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(query0).getSingleResult();
      Query<User> query1 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      doReturn(transaction1).when(session0).getTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(sessionFactory0).openSession();
      Injector.inject(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class);
      User user1 = sqlUsersRepositoryImpl0.getByUserName("spring.autoconfigure.exclude");
      assertNull(user1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlUsersRepositoryImpl sqlUsersRepositoryImpl0 = new SqlUsersRepositoryImpl();
      // Undeclared exception!
      try { 
        sqlUsersRepositoryImpl0.getByUserName("com.landlord.repositories.SqlUsersRepositoryImpl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlUsersRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlUsersRepositoryImpl sqlUsersRepositoryImpl0 = new SqlUsersRepositoryImpl();
      Integer integer0 = new Integer(0);
      Query<Integer> query0 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(query0).getSingleResult();
      Query<Integer> query1 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(sessionFactory0).openSession();
      Injector.inject(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlUsersRepositoryImpl0.getByUserName("~.T/@o)HcW*^krL");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.landlord.models.User
         //
         verifyException("com.landlord.repositories.SqlUsersRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlUsersRepositoryImpl sqlUsersRepositoryImpl0 = new SqlUsersRepositoryImpl();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("com.landlord.repositories.SqlUsersRepositoryImpl").when(user0).toString();
      Query<User> query0 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(query0).getSingleResult();
      Query<User> query1 = (Query<User>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      doReturn(transaction1).when(session0).getTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0, (Session) null).when(sessionFactory0).openSession();
      Injector.inject(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlUsersRepositoryImpl0, (Class<?>) SqlUsersRepositoryImpl.class);
      sqlUsersRepositoryImpl0.getByUserName("spring.autoconfigure.exclude");
      // Undeclared exception!
      try { 
        sqlUsersRepositoryImpl0.getByUserName("spring.autoconfigure.exclude");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlUsersRepositoryImpl", e);
      }
  }
}
