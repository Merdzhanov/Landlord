/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 12:55:13 GMT 2018
 */

package com.landlord.api.repositories;

import com.landlord.repositories.SqlMessagesRepositoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.fail;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlMessagesRepositoryImpl_ESTest extends SqlMessagesRepositoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlMessagesRepositoryImpl sqlMessagesRepositoryImpl0 = new SqlMessagesRepositoryImpl();
      Query<Integer> query0 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setParameter(anyString() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(sessionFactory0).openSession();
      Injector.inject(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlMessagesRepositoryImpl0.getMessagesByEstateID("6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlMessagesRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlMessagesRepositoryImpl sqlMessagesRepositoryImpl0 = new SqlMessagesRepositoryImpl();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sqlMessagesRepositoryImpl0.getMessagesByEstateID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlMessagesRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlMessagesRepositoryImpl sqlMessagesRepositoryImpl0 = new SqlMessagesRepositoryImpl();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(session0).createQuery(anyString());
      doReturn((Transaction) null).when(session0).beginTransaction();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(sessionFactory0).openSession();
      Injector.inject(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlMessagesRepositoryImpl0.getMessagesByEstateID(" !]DM$#l+y6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" !]DM$#l+y6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlMessagesRepositoryImpl sqlMessagesRepositoryImpl0 = new SqlMessagesRepositoryImpl();
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactory0).openSession();
      Injector.inject(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class, "sessionFactory", (Object) sessionFactory0);
      Injector.validateBean(sqlMessagesRepositoryImpl0, (Class<?>) SqlMessagesRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlMessagesRepositoryImpl0.getMessagesByEstateID("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlMessagesRepositoryImpl", e);
      }
  }
}
