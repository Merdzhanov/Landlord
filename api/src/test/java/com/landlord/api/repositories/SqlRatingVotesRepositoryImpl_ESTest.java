/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 12:51:21 GMT 2018
 */

package com.landlord.api.repositories;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import com.landlord.repositories.SqlRatingVotesRepositoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.cache.spi.access.CollectionRegionAccessStrategy;
import org.hibernate.cache.spi.access.EntityRegionAccessStrategy;
import org.hibernate.cache.spi.access.NaturalIdRegionAccessStrategy;
import org.hibernate.engine.spi.SessionDelegatorBaseImpl;
import org.hibernate.engine.spi.SessionFactoryDelegatingImpl;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.mapping.Collection;
import org.hibernate.mapping.PersistentClass;
import org.hibernate.persister.spi.PersisterCreationContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlRatingVotesRepositoryImpl_ESTest extends SqlRatingVotesRepositoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlRatingVotesRepositoryImpl sqlRatingVotesRepositoryImpl0 = new SqlRatingVotesRepositoryImpl();
      Collection collection0 = mock(Collection.class, new ViolatedAssumptionAnswer());
      CollectionRegionAccessStrategy collectionRegionAccessStrategy0 = mock(CollectionRegionAccessStrategy.class, new ViolatedAssumptionAnswer());
      PersisterCreationContext persisterCreationContext0 = mock(PersisterCreationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sqlRatingVotesRepositoryImpl0.getRatingVoteByUsersVoterAndVotedFor("id", "elt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRatingVotesRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlRatingVotesRepositoryImpl sqlRatingVotesRepositoryImpl0 = new SqlRatingVotesRepositoryImpl();
      PersistentClass persistentClass0 = null;
      EntityRegionAccessStrategy entityRegionAccessStrategy0 = mock(EntityRegionAccessStrategy.class, new ViolatedAssumptionAnswer());
      NaturalIdRegionAccessStrategy naturalIdRegionAccessStrategy0 = null;
      // Undeclared exception!
      try { 
        sqlRatingVotesRepositoryImpl0.getAverageRatingForUserByUsername("LrU Jb;_OK)nVM](>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRatingVotesRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlRatingVotesRepositoryImpl sqlRatingVotesRepositoryImpl0 = new SqlRatingVotesRepositoryImpl();
      SessionFactoryImplementor sessionFactoryImplementor0 = mock(SessionFactoryImplementor.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactoryImplementor0).openSession();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      doReturn(sessionFactoryImplementor0).when(sessionImplementor0).getFactory();
      SessionDelegatorBaseImpl sessionDelegatorBaseImpl0 = new SessionDelegatorBaseImpl(sessionImplementor0);
      SessionFactoryImplementor sessionFactoryImplementor1 = sessionDelegatorBaseImpl0.getFactory();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl(sessionFactoryImplementor1);
      Injector.inject(sqlRatingVotesRepositoryImpl0, (Class<?>) SqlRatingVotesRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRatingVotesRepositoryImpl0, (Class<?>) SqlRatingVotesRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlRatingVotesRepositoryImpl0.getAverageRatingForUserByUsername("vH_XtFq*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRatingVotesRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SessionFactoryImplementor sessionFactoryImplementor0 = mock(SessionFactoryImplementor.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactoryImplementor0).openSession();
      SqlRatingVotesRepositoryImpl sqlRatingVotesRepositoryImpl0 = new SqlRatingVotesRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl(sessionFactoryImplementor0);
      Injector.inject(sqlRatingVotesRepositoryImpl0, (Class<?>) SqlRatingVotesRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRatingVotesRepositoryImpl0, (Class<?>) SqlRatingVotesRepositoryImpl.class);
      // Undeclared exception!
      try { 
        sqlRatingVotesRepositoryImpl0.getRatingVoteByUsersVoterAndVotedFor("vH_XtF9*", "vH_XtF9*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRatingVotesRepositoryImpl", e);
      }
  }
}
