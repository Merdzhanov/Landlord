/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:09:53 GMT 2018
 */

package com.landlord.api.dto;

import com.landlord.dto.ChatMessageDTO;
import com.landlord.dto.EstateDTO;
import com.landlord.dto.UserDTO;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EstateDTO_ESTest extends EstateDTO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      EstateDTO estateDTO1 = new EstateDTO("i", (byte[]) null, (String) null, (BigDecimal) null, (BigDecimal) null, (Date) null);
      estateDTO0.setMessageList(estateDTO1.messageList);
      assertNull(estateDTO1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      EstateDTO estateDTO1 = new EstateDTO("com.landlord.dto.ChatMessageDTO", (byte[]) null, "]H%j.;, ", estateDTO0.owedAmount, estateDTO0.owedAmount, (Date) null);
      List<UserDTO> list0 = estateDTO1.getUsers();
      estateDTO0.setUsers(list0);
      assertEquals("]H%j.;, ", estateDTO1.getAddress());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      EstateDTO estateDTO0 = new EstateDTO("yYnHmE", (byte[]) null, "B$KHN1", bigDecimal0, bigDecimal0, date0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      estateDTO0.setDueDate(date1);
      assertEquals("B$KHN1", estateDTO0.getAddress());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      estateDTO0.setOwedAmount(bigDecimal0);
      assertEquals(0, estateDTO0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      List<UserDTO> list0 = estateDTO0.getUsers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      estateDTO0.owedAmount = bigDecimal0;
      BigDecimal bigDecimal1 = estateDTO0.getOwedAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)20);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      EstateDTO estateDTO0 = new EstateDTO("com.landlord.dto.EstateDTO", byteArray0, "Yo+xZ\"hW<0WjoB}(|", bigDecimal0, bigDecimal0, date0);
      BigDecimal bigDecimal1 = estateDTO0.getOwedAmount();
      assertNotNull(bigDecimal1);
      assertEquals("Yo+xZ\"hW<0WjoB}(|", estateDTO0.getAddress());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-83));
      EstateDTO estateDTO0 = new EstateDTO("~/RZ", byteArray0, "~/RZ", bigDecimal0, bigDecimal0, (Date) null);
      BigDecimal bigDecimal1 = estateDTO0.getOwedAmount();
      assertEquals((byte) (-83), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.name = "4W\"_j9EyBo?/W";
      String string0 = estateDTO0.getName();
      assertEquals("4W\"_j9EyBo?/W", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.setName("");
      String string0 = estateDTO0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      EstateDTO estateDTO0 = new EstateDTO("/_W0n[De>&(XMri", byteArray0, "/_W0n[De>&(XMri", bigDecimal0, bigDecimal0, (Date) null);
      BigDecimal bigDecimal1 = estateDTO0.getMonthlyRent();
      assertEquals((short) (-256), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      estateDTO0.monthlyRent = bigDecimal0;
      BigDecimal bigDecimal1 = estateDTO0.getMonthlyRent();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = new BigDecimal(2160L);
      estateDTO0.setMonthlyRent(bigDecimal0);
      BigDecimal bigDecimal1 = estateDTO0.getMonthlyRent();
      assertEquals((byte)112, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      EstateDTO estateDTO0 = new EstateDTO("/_W0n[De>&(XMri", byteArray0, "/_W0n[De>&(XMri", bigDecimal0, bigDecimal0, (Date) null);
      BigDecimal bigDecimal1 = estateDTO0.getMonthlyRent();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-83));
      EstateDTO estateDTO0 = new EstateDTO("~/RZ", byteArray0, "~/RZ", bigDecimal0, bigDecimal0, (Date) null);
      List<ChatMessageDTO> list0 = estateDTO0.getMessageList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.imageUrl = "v.KZMDvIAge";
      String string0 = estateDTO0.getImageUrl();
      assertEquals("v.KZMDvIAge", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.setImageUrl("");
      String string0 = estateDTO0.getImageUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-83));
      EstateDTO estateDTO0 = new EstateDTO("~/RZ", byteArray0, "~/RZ", bigDecimal0, bigDecimal0, (Date) null);
      byte[] byteArray1 = estateDTO0.getImage();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      byte[] byteArray0 = new byte[0];
      estateDTO0.setImage(byteArray0);
      byte[] byteArray1 = estateDTO0.getImage();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-83));
      EstateDTO estateDTO0 = new EstateDTO("~/RZ", byteArray0, "~/RZ", bigDecimal0, bigDecimal0, (Date) null);
      estateDTO0.setId((-1));
      int int0 = estateDTO0.getId();
      assertEquals((-1), estateDTO0.id);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)20);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(date0).toString();
      EstateDTO estateDTO0 = new EstateDTO("com.landlord.dto.EstateDTO", byteArray0, "Yo+xZ\"hW<0WjoB}(|", bigDecimal0, bigDecimal0, date0);
      Date date1 = estateDTO0.getDueDate();
      assertEquals("Yo+xZ\"hW<0WjoB}(|", estateDTO0.getAddress());
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.setDescription("{");
      String string0 = estateDTO0.getDescription();
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      EstateDTO estateDTO0 = new EstateDTO("6g|H\"Rq (", byteArray0, "", (BigDecimal) null, (BigDecimal) null, date0);
      assertEquals("6g|H\"Rq (", estateDTO0.getDescription());
      
      estateDTO0.setDescription("");
      String string0 = estateDTO0.getDescription();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)20);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      EstateDTO estateDTO0 = new EstateDTO("com.landlord.dto.EstateDTO", byteArray0, "Yo+xZ\"hW<0WjoB}(|", bigDecimal0, bigDecimal0, date0);
      String string0 = estateDTO0.getAddress();
      assertEquals("Yo+xZ\"hW<0WjoB}(|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.setAddress("");
      String string0 = estateDTO0.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      byte[] byteArray0 = estateDTO0.getImage();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      estateDTO0.setId(12);
      int int0 = estateDTO0.getId();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)0);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      EstateDTO estateDTO0 = new EstateDTO("Q]8SAL.\"4cl W", byteArray0, "Q]8SAL.\"4cl W", bigDecimal0, bigDecimal0, date0);
      String string0 = estateDTO0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      int int0 = estateDTO0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      List<ChatMessageDTO> list0 = estateDTO0.getMessageList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = estateDTO0.getMonthlyRent();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      BigDecimal bigDecimal0 = estateDTO0.getOwedAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      String string0 = estateDTO0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      Date date0 = estateDTO0.getDueDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      String string0 = estateDTO0.getImageUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EstateDTO estateDTO0 = new EstateDTO();
      String string0 = estateDTO0.getDescription();
      assertNull(string0);
  }
}
