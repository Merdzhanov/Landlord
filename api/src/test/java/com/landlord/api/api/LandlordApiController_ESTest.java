/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:14:58 GMT 2018
 */

package com.landlord.api.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import com.landlord.api.LandlordApiController;
import com.landlord.dto.ChatMessageDTO;
import com.landlord.dto.ChatMessageInputDTO;
import com.landlord.dto.EstateDTO;
import com.landlord.dto.RatingVoteDTO;
import com.landlord.dto.UserDTO;
import com.landlord.models.ChatMessage;
import com.landlord.models.Estate;
import com.landlord.models.RatingVote;
import com.landlord.models.User;
import com.landlord.services.base.LandlordService;
import com.landlord.utils.ChatMessageInputMapperImpl;
import com.landlord.utils.ChatMessageMapperImpl;
import com.landlord.utils.EstateMapperImpl;
import com.landlord.utils.UserMapperImpl;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LandlordApiController_ESTest extends LandlordApiController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getMessagesByEstateID(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chatMessageMapperImpl0).mapMany(anyList());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, (EstateMapperImpl) null, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<ChatMessageDTO> list0 = landlordApiController0.getMessagesByEstateID((String) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getMessagesByEstateID(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chatMessageMapperImpl0).mapMany(anyList());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<ChatMessageDTO> list0 = landlordApiController0.getMessagesByEstateID("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getEstatesByUser(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(estateMapperImpl0).mapMany(anyList());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<EstateDTO> list0 = landlordApiController0.getEstatesByUser((String) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getAllMessages();
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chatMessageMapperImpl0).mapMany(anyList());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<ChatMessageDTO> list0 = landlordApiController0.getAllMessages();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((RatingVote) null).when(landlordService0).CreateRatingVoteByUsersVoterAndVotedFor(any(RatingVoteDTO.class));
      doReturn((List) null).when(landlordService0).getAllEstates();
      doReturn((List) null).when(landlordService0).getAllMessages();
      doReturn((List) null).when(landlordService0).getAllUsers();
      doReturn((User) null).when(landlordService0).getByUserName(anyString());
      doReturn((Estate) null).when(landlordService0).getEstateByID(anyInt());
      doReturn((List) null, (List) null).when(landlordService0).getMessagesByEstate(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((UserDTO) null).when(userMapperImpl0).map(any(User.class));
      doReturn((List) null).when(userMapperImpl0).mapMany(anyList());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((EstateDTO) null).when(estateMapperImpl0).map(any(Estate.class));
      doReturn((List) null).when(estateMapperImpl0).mapMany(anyList());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null, (List) null).when(chatMessageMapperImpl0).mapMany(anyList());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      RatingVoteDTO ratingVoteDTO0 = mock(RatingVoteDTO.class, new ViolatedAssumptionAnswer());
      landlordApiController0.getEstatesByID(10);
      landlordApiController0.getUserByUsername("");
      landlordApiController0.createRatingVote(ratingVoteDTO0);
      landlordApiController0.getAllEstates();
      landlordApiController0.getAllMessages();
      landlordApiController0.getMessagesByEstate("");
      landlordApiController0.getAllUsers();
      landlordApiController0.getMessagesByEstate(">BqvCEG>Kb,j");
      // Undeclared exception!
      try { 
        landlordApiController0.updateEstate((Estate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RatingVote ratingVote0 = mock(RatingVote.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ratingVote0).toString();
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn(ratingVote0).when(landlordService0).CreateRatingVoteByUsersVoterAndVotedFor(any(RatingVoteDTO.class));
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      RatingVoteDTO ratingVoteDTO0 = mock(RatingVoteDTO.class, new ViolatedAssumptionAnswer());
      ResponseEntity<RatingVote> responseEntity0 = landlordApiController0.createRatingVote(ratingVoteDTO0);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn(chatMessage0).when(landlordService0).create(any(RatingVote.class));
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageDTO chatMessageDTO0 = mock(ChatMessageDTO.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chatMessageDTO0).toString();
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn(chatMessageDTO0).when(chatMessageMapperImpl0).map(any(ChatMessage.class));
      ChatMessage chatMessage1 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn(chatMessage1).when(chatMessageInputMapperImpl0).map(any(ChatMessageInputDTO.class));
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      ResponseEntity<ChatMessageDTO> responseEntity0 = landlordApiController0.createChatMessage((ChatMessageInputDTO) null);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((Estate) null).when(landlordService0).getEstateByID(anyInt());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      byte[] byteArray0 = new byte[0];
      Estate estate0 = mock(Estate.class, new ViolatedAssumptionAnswer());
      doReturn((-1501)).when(estate0).getId();
      doReturn(byteArray0).when(estate0).getImage();
      // Undeclared exception!
      try { 
        landlordApiController0.updateEstate(estate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(landlordService0).getByUserName(anyString());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, (UserMapperImpl) null, estateMapperImpl0, chatMessageMapperImpl0, (ChatMessageInputMapperImpl) null);
      // Undeclared exception!
      try { 
        landlordApiController0.getUserByUsername("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getMessagesByEstate(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, (ChatMessageMapperImpl) null, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getMessagesByEstate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController((LandlordService) null, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getEstatesByUser("PRECONDITION_REQUIRED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((Estate) null).when(landlordService0).getEstateByID(anyInt());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, (EstateMapperImpl) null, chatMessageMapperImpl0, (ChatMessageInputMapperImpl) null);
      // Undeclared exception!
      try { 
        landlordApiController0.getEstatesByID(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getAllUsers();
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, (UserMapperImpl) null, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getAllUsers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getAllMessages();
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, (ChatMessageMapperImpl) null, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getAllMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController((LandlordService) null, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getAllEstates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController((LandlordService) null, userMapperImpl0, (EstateMapperImpl) null, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      RatingVoteDTO ratingVoteDTO0 = mock(RatingVoteDTO.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        landlordApiController0.createRatingVote(ratingVoteDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((ChatMessage) null).when(landlordService0).create(any(RatingVote.class));
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((ChatMessage) null).when(chatMessageInputMapperImpl0).map(any(ChatMessageInputDTO.class));
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, (ChatMessageMapperImpl) null, chatMessageInputMapperImpl0);
      ChatMessageInputDTO chatMessageInputDTO0 = mock(ChatMessageInputDTO.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        landlordApiController0.createChatMessage(chatMessageInputDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Estate estate0 = mock(Estate.class, new ViolatedAssumptionAnswer());
      doReturn("").when(estate0).toString();
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn(estate0).when(landlordService0).getEstateByID(anyInt());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      Estate estate1 = mock(Estate.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(estate1).getId();
      doReturn((byte[]) null).when(estate1).getImage();
      ResponseEntity<Estate> responseEntity0 = landlordApiController0.updateEstate(estate1);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getMessagesByEstateID(anyString());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, (UserMapperImpl) null, estateMapperImpl0, (ChatMessageMapperImpl) null, chatMessageInputMapperImpl0);
      // Undeclared exception!
      try { 
        landlordApiController0.getMessagesByEstateID("MTlIvr/z6O%xF0/!Sz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.LandlordApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getMessagesByEstate(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chatMessageMapperImpl0).mapMany(anyList());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<ChatMessageDTO> list0 = landlordApiController0.getMessagesByEstate((String) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(landlordService0).getEstatesByUser(anyString());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(estateMapperImpl0).mapMany(anyList());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      List<EstateDTO> list0 = landlordApiController0.getEstatesByUser("r 9^/W08ki;wZ ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      LandlordService<Estate> landlordService0 = (LandlordService<Estate>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((ChatMessage) null).when(landlordService0).create(any(Estate.class));
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = mock(ChatMessageMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((ChatMessageDTO) null).when(chatMessageMapperImpl0).map(any(ChatMessage.class));
      ChatMessageInputMapperImpl chatMessageInputMapperImpl0 = mock(ChatMessageInputMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn(chatMessage0).when(chatMessageInputMapperImpl0).map(any(ChatMessageInputDTO.class));
      LandlordApiController landlordApiController0 = new LandlordApiController(landlordService0, userMapperImpl0, estateMapperImpl0, chatMessageMapperImpl0, chatMessageInputMapperImpl0);
      ChatMessageInputDTO chatMessageInputDTO0 = mock(ChatMessageInputDTO.class, new ViolatedAssumptionAnswer());
      ResponseEntity<ChatMessageDTO> responseEntity0 = landlordApiController0.createChatMessage(chatMessageInputDTO0);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }
}
