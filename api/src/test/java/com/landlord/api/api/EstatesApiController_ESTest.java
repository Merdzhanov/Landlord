/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 12:20:41 GMT 2018
 */

package com.landlord.api.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import com.landlord.api.EstatesApiController;
import com.landlord.dto.EstateDTO;
import com.landlord.models.Estate;
import com.landlord.services.base.EstateService;
import com.landlord.utils.EstateMapperImpl;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EstatesApiController_ESTest extends EstatesApiController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EstateService estateService0 = mock(EstateService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(estateService0).getEstatesByUser(anyString());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController(estateService0, estateMapperImpl0);
      List<EstateDTO> list0 = estatesApiController0.getEstatesByUser("*!CNtu,*L");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EstateService estateService0 = mock(EstateService.class, new ViolatedAssumptionAnswer());
      doReturn((EstateDTO) null).when(estateService0).getEstateByID(anyInt());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController(estateService0, estateMapperImpl0);
      EstateDTO estateDTO0 = estatesApiController0.getEstatesByID((-9));
      assertNull(estateDTO0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController((EstateService) null, estateMapperImpl0);
      Estate estate0 = mock(Estate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        estatesApiController0.updateEstate(estate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.EstatesApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController((EstateService) null, estateMapperImpl0);
      // Undeclared exception!
      try { 
        estatesApiController0.getEstatesByUser("n9H}[vS o>olAQvk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.EstatesApiController", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EstateService estateService0 = mock(EstateService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(estateService0).getEstatesByUser(anyString());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController(estateService0, estateMapperImpl0);
      List<EstateDTO> list0 = estatesApiController0.getEstatesByUser((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EstateService estateService0 = mock(EstateService.class, new ViolatedAssumptionAnswer());
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController(estateService0, estateMapperImpl0);
      Estate estate0 = mock(Estate.class, new ViolatedAssumptionAnswer());
      estatesApiController0.updateEstate(estate0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EstateMapperImpl estateMapperImpl0 = mock(EstateMapperImpl.class, new ViolatedAssumptionAnswer());
      EstatesApiController estatesApiController0 = new EstatesApiController((EstateService) null, estateMapperImpl0);
      // Undeclared exception!
      try { 
        estatesApiController0.getEstatesByID((-4030));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.api.EstatesApiController", e);
      }
  }
}
