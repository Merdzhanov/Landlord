/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:15:47 GMT 2018
 */

package com.landlord.api.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import com.landlord.dto.RatingVoteDTO;
import com.landlord.models.RatingVote;
import com.landlord.models.base.ModelBase;
import com.landlord.repositories.SqlRepositoryImpl;
import com.landlord.repositories.base.GenericRepository;
import com.landlord.services.LandlordServiceImpl;
import com.landlord.services.base.LandlordService;
import com.landlord.utils.UserMapperImpl;
import com.landlord.utils.VotingInputMapperImpl;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.collection.internal.PersistentIdentifierBag;
import org.hibernate.engine.spi.SessionFactoryDelegatingImpl;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VotingInputMapperImpl_ESTest extends VotingInputMapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      doReturn((RatingVote) null).when(landlordService0).CreateRatingVoteByUsersVoterAndVotedFor(any(RatingVoteDTO.class));
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl(landlordService0);
      RatingVote ratingVote0 = votingInputMapperImpl0.map((RatingVoteDTO) null);
      assertNull(ratingVote0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl(landlordServiceImpl0);
      RatingVoteDTO ratingVoteDTO0 = new RatingVoteDTO();
      // Undeclared exception!
      try { 
        votingInputMapperImpl0.map(ratingVoteDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LandlordService<RatingVote> landlordService0 = (LandlordService<RatingVote>) mock(LandlordService.class, new ViolatedAssumptionAnswer());
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl(landlordService0);
      RatingVoteDTO ratingVoteDTO0 = votingInputMapperImpl0.map((RatingVote) null);
      assertNull(ratingVoteDTO0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl((LandlordService) null);
      LinkedList<RatingVoteDTO> linkedList0 = new LinkedList<RatingVoteDTO>();
      List<RatingVote> list0 = votingInputMapperImpl0.mapManyToModel(linkedList0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl((LandlordService) null);
      PersistentIdentifierBag persistentIdentifierBag0 = new PersistentIdentifierBag();
      List<RatingVoteDTO> list0 = votingInputMapperImpl0.mapMany(persistentIdentifierBag0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      VotingInputMapperImpl votingInputMapperImpl0 = new VotingInputMapperImpl(landlordServiceImpl0);
      RatingVoteDTO ratingVoteDTO0 = new RatingVoteDTO();
      // Undeclared exception!
      try { 
        votingInputMapperImpl0.map(ratingVoteDTO0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }
}
