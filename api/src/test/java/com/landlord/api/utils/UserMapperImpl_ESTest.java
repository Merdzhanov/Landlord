/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:09:00 GMT 2018
 */

package com.landlord.api.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.landlord.dto.UserDTO;
import com.landlord.models.User;
import com.landlord.models.base.UserType;
import com.landlord.utils.UserMapperImpl;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserMapperImpl_ESTest extends UserMapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<UserDTO> linkedList0 = new LinkedList<UserDTO>();
      UserDTO userDTO0 = new UserDTO();
      linkedList0.add(userDTO0);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      List<User> list0 = userMapperImpl0.mapManyToModel(linkedList0);
      List<UserDTO> list1 = userMapperImpl0.mapMany(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      UserType userType0 = UserType.TENANT;
      UserDTO userDTO0 = new UserDTO((-1934), "Uz6gzS]O`21u`BCOd>", "Uz6gzS]O`21u`BCOd>", "Uz6gzS]O`21u`BCOd>", (-1934), userType0);
      User user0 = userMapperImpl0.map(userDTO0);
      UserDTO userDTO1 = userMapperImpl0.map(user0);
      assertEquals((-1934), userDTO1.id);
      assertEquals((-1934.0F), userDTO1.rating, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      UserDTO userDTO0 = new UserDTO();
      User user0 = userMapperImpl0.map(userDTO0);
      UserDTO userDTO1 = userMapperImpl0.map(user0);
      assertEquals(0, userDTO1.id);
      assertEquals(0.0F, userDTO1.rating, 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      UserType userType0 = UserType.TENANT;
      User user0 = new User(116, (String) null, 116, userType0, (String) null, "xN*2@#t,22)T->8R");
      UserDTO userDTO0 = userMapperImpl0.map(user0);
      User user1 = userMapperImpl0.map(userDTO0);
      assertEquals(116.0F, user1.getRating(), 0.01F);
      assertEquals(116, user1.id);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      UserDTO userDTO0 = new UserDTO();
      LinkedList<UserDTO> linkedList0 = new LinkedList<UserDTO>();
      List<UserDTO> list0 = linkedList0.subList(0, 0);
      linkedList0.add(userDTO0);
      // Undeclared exception!
      try { 
        userMapperImpl0.mapManyToModel(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      // Undeclared exception!
      try { 
        userMapperImpl0.mapManyToModel((List<UserDTO>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.UserMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      // Undeclared exception!
      try { 
        userMapperImpl0.mapMany((List<User>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.UserMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      // Undeclared exception!
      try { 
        userMapperImpl0.map((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.UserMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      // Undeclared exception!
      try { 
        userMapperImpl0.map((UserDTO) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.UserMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LinkedList<UserDTO> linkedList0 = new LinkedList<UserDTO>();
      List<User> list0 = userMapperImpl0.mapManyToModel(linkedList0);
      List<UserDTO> list1 = userMapperImpl0.mapMany(list0);
      assertTrue(list1.isEmpty());
  }
}
