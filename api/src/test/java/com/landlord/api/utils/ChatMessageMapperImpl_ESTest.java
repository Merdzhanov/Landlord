/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:12:06 GMT 2018
 */

package com.landlord.api.utils;

import com.landlord.dto.ChatMessageDTO;
import com.landlord.dto.UserDTO;
import com.landlord.models.ChatMessage;
import com.landlord.models.User;
import com.landlord.utils.ChatMessageMapperImpl;
import com.landlord.utils.UserMapperImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Date;
import java.util.List;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChatMessageMapperImpl_ESTest extends ChatMessageMapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapperImpl0).map(any(UserDTO.class));
      doReturn((UserDTO) null).when(userMapperImpl0).map(any(User.class));
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(chatMessage0).getDate();
      doReturn(1712).when(chatMessage0).getId();
      doReturn("]2Pjfcq(gJg/ntA").when(chatMessage0).getMessage();
      doReturn(user1).when(chatMessage0).getSender();
      ChatMessageDTO chatMessageDTO0 = chatMessageMapperImpl0.map(chatMessage0);
      ChatMessage chatMessage1 = chatMessageMapperImpl0.map(chatMessageDTO0);
      assertEquals(1712, chatMessage1.id);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapperImpl0).map(any(UserDTO.class));
      doReturn((UserDTO) null).when(userMapperImpl0).map(any(User.class));
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(chatMessage0).getDate();
      doReturn((-801)).when(chatMessage0).getId();
      doReturn("com.landlord.models.RatingVote").when(chatMessage0).getMessage();
      doReturn((User) null).when(chatMessage0).getSender();
      ChatMessageDTO chatMessageDTO0 = chatMessageMapperImpl0.map(chatMessage0);
      ChatMessage chatMessage1 = chatMessageMapperImpl0.map(chatMessageDTO0);
      assertEquals((-801), chatMessage1.id);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl((UserMapperImpl) null);
      ChatMessage chatMessage0 = mock(ChatMessage.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(chatMessage0).getDate();
      doReturn(0).when(chatMessage0).getId();
      doReturn((String) null).when(chatMessage0).getMessage();
      doReturn((User) null).when(chatMessage0).getSender();
      // Undeclared exception!
      try { 
        chatMessageMapperImpl0.map(chatMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.ChatMessageMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      // Undeclared exception!
      try { 
        chatMessageMapperImpl0.map((ChatMessageDTO) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.ChatMessageMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      // Undeclared exception!
      try { 
        chatMessageMapperImpl0.mapManyToModel((List<ChatMessageDTO>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.ChatMessageMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      // Undeclared exception!
      try { 
        chatMessageMapperImpl0.mapMany((List<ChatMessage>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.utils.ChatMessageMapperImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserDTO userDTO0 = mock(UserDTO.class, new ViolatedAssumptionAnswer());
      UserMapperImpl userMapperImpl0 = mock(UserMapperImpl.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapperImpl0).map(any(UserDTO.class));
      doReturn(userDTO0).when(userMapperImpl0).map(any(User.class));
      ChatMessageMapperImpl chatMessageMapperImpl0 = new ChatMessageMapperImpl(userMapperImpl0);
      ChatMessageDTO chatMessageDTO0 = mock(ChatMessageDTO.class, new ViolatedAssumptionAnswer());
      ChatMessage chatMessage0 = chatMessageMapperImpl0.map(chatMessageDTO0);
      ChatMessageDTO chatMessageDTO1 = chatMessageMapperImpl0.map(chatMessage0);
      assertEquals(0, chatMessageDTO1.id);
  }
}
