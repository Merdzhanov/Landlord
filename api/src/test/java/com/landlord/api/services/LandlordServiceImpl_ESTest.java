/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 11:07:48 GMT 2018
 */

package com.landlord.api.services;

import com.landlord.dto.RatingVoteDTO;
import com.landlord.models.RatingVote;
import com.landlord.models.User;
import com.landlord.models.base.ModelBase;
import com.landlord.repositories.SqlRepositoryImpl;
import com.landlord.repositories.base.GenericRepository;
import com.landlord.services.LandlordServiceImpl;
import com.landlord.utils.UserMapperImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.engine.spi.SessionDelegatorBaseImpl;
import org.hibernate.engine.spi.SessionFactoryDelegatingImpl;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.engine.spi.SessionImplementor;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Date;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LandlordServiceImpl_ESTest extends LandlordServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      Integer integer0 = new Integer(34);
      RatingVoteDTO ratingVoteDTO0 = new RatingVoteDTO(integer0, "com.landlord.services.LandlordServiceImpl", "");
      // Undeclared exception!
      try { 
        landlordServiceImpl0.CreateRatingVoteByUsersVoterAndVotedFor(ratingVoteDTO0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      User user0 = new User();
      // Undeclared exception!
      try { 
        landlordServiceImpl0.update(1939, user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, (UserMapperImpl) null);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getMessagesByEstateID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) null);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getMessagesByEstate(".Yg:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getEstatesByUser("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hibernate.engine.spi.SessionFactoryDelegatingImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getEstateByID(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getByUserName("@A2eYJu@g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getByUserName("NotUpdatableReason.3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllUsers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllEstates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.delete(2452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      RatingVote ratingVote0 = new RatingVote();
      // Undeclared exception!
      try { 
        landlordServiceImpl0.create(ratingVote0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl((GenericRepository<ModelBase>) null, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.CreateRatingVoteByUsersVoterAndVotedFor((RatingVoteDTO) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.LandlordServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      landlordServiceImpl0.delete(1838);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      RatingVote ratingVote0 = new RatingVote(117, "H", (User) null, (Date) null);
      landlordServiceImpl0.update(117, ratingVote0);
      assertEquals("H", ratingVote0.getVoter());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllEstates();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryImplementor sessionFactoryImplementor0 = mock(SessionFactoryImplementor.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactoryImplementor0).openSession();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      doReturn(sessionFactoryImplementor0).when(sessionImplementor0).getFactory();
      SessionDelegatorBaseImpl sessionDelegatorBaseImpl0 = new SessionDelegatorBaseImpl(sessionImplementor0);
      SessionFactoryImplementor sessionFactoryImplementor1 = sessionDelegatorBaseImpl0.getFactory();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl(sessionFactoryImplementor1);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getEstatesByUser("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllMessages();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      RatingVoteDTO ratingVoteDTO0 = new RatingVoteDTO();
      // Undeclared exception!
      try { 
        landlordServiceImpl0.create(ratingVoteDTO0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryImplementor sessionFactoryImplementor0 = mock(SessionFactoryImplementor.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactoryImplementor0).openSession();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      doReturn(sessionFactoryImplementor0).when(sessionImplementor0).getSessionFactory();
      SessionDelegatorBaseImpl sessionDelegatorBaseImpl0 = new SessionDelegatorBaseImpl(sessionImplementor0);
      SessionFactoryImplementor sessionFactoryImplementor1 = sessionDelegatorBaseImpl0.getSessionFactory();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl(sessionFactoryImplementor1);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getMessagesByEstate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getEstateByID(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryDelegatingImpl sessionFactoryDelegatingImpl0 = new SessionFactoryDelegatingImpl((SessionFactoryImplementor) null);
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryDelegatingImpl0);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, (UserMapperImpl) null);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getAllUsers();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SqlRepositoryImpl sqlRepositoryImpl0 = new SqlRepositoryImpl();
      SessionFactoryImplementor sessionFactoryImplementor0 = mock(SessionFactoryImplementor.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(sessionFactoryImplementor0).openSession();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      doReturn(sessionFactoryImplementor0).when(sessionImplementor0).getFactory();
      SessionDelegatorBaseImpl sessionDelegatorBaseImpl0 = new SessionDelegatorBaseImpl(sessionImplementor0);
      SessionFactoryImplementor sessionFactoryImplementor1 = sessionDelegatorBaseImpl0.getFactory();
      Injector.inject(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class, "sessionFactory", (Object) sessionFactoryImplementor1);
      Injector.validateBean(sqlRepositoryImpl0, (Class<?>) SqlRepositoryImpl.class);
      UserMapperImpl userMapperImpl0 = new UserMapperImpl();
      LandlordServiceImpl landlordServiceImpl0 = new LandlordServiceImpl(sqlRepositoryImpl0, userMapperImpl0);
      // Undeclared exception!
      try { 
        landlordServiceImpl0.getMessagesByEstateID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.repositories.SqlRepositoryImpl", e);
      }
  }
}
