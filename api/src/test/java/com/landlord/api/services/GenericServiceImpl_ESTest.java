/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 13 12:18:39 GMT 2018
 */

package com.landlord.api.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.Mockito.mock;

import com.landlord.models.RatingVote;
import com.landlord.models.base.ModelBase;
import com.landlord.repositories.base.GenericRepository;
import com.landlord.services.GenericServiceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericServiceImpl_ESTest extends GenericServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericRepository<ModelBase> genericRepository0 = (GenericRepository<ModelBase>) mock(GenericRepository.class, new ViolatedAssumptionAnswer());
      GenericServiceImpl<Integer> genericServiceImpl0 = new GenericServiceImpl<Integer>(genericRepository0);
      ModelBase modelBase0 = mock(ModelBase.class, new ViolatedAssumptionAnswer());
      genericServiceImpl0.update(0, modelBase0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericServiceImpl<Object> genericServiceImpl0 = new GenericServiceImpl<Object>((GenericRepository<ModelBase>) null);
      // Undeclared exception!
      try { 
//        genericServiceImpl0.delete(2845);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.GenericServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericServiceImpl<RatingVote> genericServiceImpl0 = new GenericServiceImpl<RatingVote>((GenericRepository<ModelBase>) null);
      ModelBase modelBase0 = mock(ModelBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        genericServiceImpl0.create(modelBase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.GenericServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericRepository<ModelBase> genericRepository0 = (GenericRepository<ModelBase>) mock(GenericRepository.class, new ViolatedAssumptionAnswer());
      GenericServiceImpl<RatingVote> genericServiceImpl0 = new GenericServiceImpl<RatingVote>(genericRepository0);
//      genericServiceImpl0.delete(0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericRepository<ModelBase> genericRepository0 = (GenericRepository<ModelBase>) mock(GenericRepository.class, new ViolatedAssumptionAnswer());
      GenericServiceImpl<Integer> genericServiceImpl0 = new GenericServiceImpl<Integer>(genericRepository0);
      ModelBase modelBase0 = mock(ModelBase.class, new ViolatedAssumptionAnswer());
      genericServiceImpl0.create(modelBase0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericServiceImpl<Integer> genericServiceImpl0 = new GenericServiceImpl<Integer>((GenericRepository<ModelBase>) null);
      ModelBase modelBase0 = mock(ModelBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        genericServiceImpl0.update(1619, modelBase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.landlord.services.GenericServiceImpl", e);
      }
  }
}
